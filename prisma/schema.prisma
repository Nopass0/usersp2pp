generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          Int                           @id @default(autoincrement())
  name                        String
  passCode                    String                        @unique
  isActive                    Boolean                       @default(true)
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  lastNotification            DateTime?
  role                        UserRole                      @default(USER)
  bybitApiSecret              String?
  bybitApiToken               String?
  lastBybitSyncAt             DateTime?
  lastBybitSyncStatus         String?
  auditLogs                   AuditLog[]
  BybitCabinetChainedWithUser BybitCabinetChainedWithUser[]
  BybitClipMatch              BybitClipMatch[]
  bybitTransactions           BybitTransaction[]
  cabinetNotifications        CabinetNotification[]
  MatchBybitReport            MatchBybitReport[]
  MatchViresReport            MatchViresReport[]
  reportNotifications         ReportNotification[]
  telegramAccounts            TelegramAccount[]
  transactions                Transaction[]
  ViresCabinet                ViresCabinet[]
  ViresClipMatch              ViresClipMatch[]
  workSessions                WorkSession[]
}

model TelegramAccount {
  id         Int      @id @default(autoincrement())
  telegramId String   @unique
  username   String?
  firstName  String?
  lastName   String?
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Admin {
  id         Int      @id @default(autoincrement())
  telegramId String   @unique
  username   String?
  firstName  String?
  lastName   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model SystemSettings {
  id                     Int      @id @default(autoincrement())
  reportReminderInterval Int      @default(180)
  reportWaitTime         Int      @default(10)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Transaction {
  id           Int      @id @default(autoincrement())
  externalId   String?
  orderNo      String?
  dateTime     DateTime
  type         String
  asset        String
  amount       Float
  totalPrice   Float
  unitPrice    Float
  counterparty String?
  status       String
  originalData Json?
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  matches      Match[]
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([externalId, userId])
}

model BybitTransaction {
  id               Int          @id @default(autoincrement())
  orderNo          String       @unique
  counterparty     String?
  status           String
  userId           Int
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  amount           Float
  asset            String
  dateTime         DateTime
  originalData     Json?
  totalPrice       Float
  type             String
  unitPrice        Float
  processed        Boolean      @default(false)
  extractedPhones  String[]     @default([])
  lastAttemptError String?
  BybitMatch       BybitMatch[]
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orderNo, userId])
}

model WorkSession {
  id            Int                      @id @default(autoincrement())
  startTime     DateTime
  endTime       DateTime?
  duration      Int?
  autoCompleted Boolean                  @default(false)
  userId        Int
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  comment       String?
  user          User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  idexCabinets  WorkSessionIdexCabinet[]
}

model ReportNotification {
  id               Int       @id @default(autoincrement())
  notificationTime DateTime
  reportReceived   Boolean   @default(false)
  reportTime       DateTime?
  adminNotified    Boolean   @default(false)
  adminNotifyTime  DateTime?
  userId           Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkSessionIdexCabinet {
  workSessionId Int
  idexCabinetId Int
  assignedAt    DateTime    @default(now())
  idexCabinet   IdexCabinet @relation(fields: [idexCabinetId], references: [id], onDelete: Cascade)
  workSession   WorkSession @relation(fields: [workSessionId], references: [id], onDelete: Cascade)

  @@id([workSessionId, idexCabinetId])
}

model NotificationSettings {
  id        Int      @id @default(autoincrement())
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IdexCabinet {
  id            Int                      @id @default(autoincrement())
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  idexId        Int
  login         String
  password      String
  notifications CabinetNotification[]
  IdexSyncOrder IdexSyncOrder[]
  transactions  IdexTransaction[]
  workSessions  WorkSessionIdexCabinet[]
}

model IdexTransaction {
  id                Int              @id @default(autoincrement())
  externalId        BigInt
  paymentMethodId   BigInt
  wallet            String
  amount            Json
  total             Json
  status            Int
  approvedAt        String?
  expiredAt         String?
  createdAtExternal String
  updatedAtExternal String
  extraData         Json
  cabinetId         Int
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  BybitClipMatch    BybitClipMatch[]
  BybitMatch        BybitMatch[]
  cabinet           IdexCabinet      @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  matches           Match[]

  @@unique([externalId, cabinetId])
}

model Match {
  id                Int             @id @default(autoincrement())
  idexTransactionId Int
  transactionId     Int
  timeDifference    Int
  grossExpense      Float
  grossIncome       Float
  grossProfit       Float
  profitPercentage  Float
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  idexTransaction   IdexTransaction @relation(fields: [idexTransactionId], references: [id])
  transaction       Transaction     @relation(fields: [transactionId], references: [id])

  @@unique([idexTransactionId, transactionId])
}

model BybitMatch {
  id                 Int              @id @default(autoincrement())
  idexTransactionId  Int
  bybitTransactionId Int
  timeDifference     Int
  grossExpense       Float
  grossIncome        Float
  grossProfit        Float
  profitPercentage   Float
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  bybitTransaction   BybitTransaction @relation(fields: [bybitTransactionId], references: [id])
  idexTransaction    IdexTransaction  @relation(fields: [idexTransactionId], references: [id])

  @@unique([idexTransactionId, bybitTransactionId])
}

model Card {
  id                  Int           @id @default(autoincrement())
  externalId          Int
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  provider            String
  cardNumber          String
  bank                String
  phoneNumber         String
  appPin              Int
  terminalPin         String
  comment             String?
  picachu             String?
  status              CardStatus    @default(ACTIVE)
  cardPrice           Float?
  isPaid              Boolean       @default(false)
  letterCode          String?
  actor               String?
  inWork              Boolean       @default(false)
  activePaymentMethod String?       @default("c2c")
  auditLogs           AuditLog[]    @relation("CardAuditLogs")
  balances            CardBalance[]
  cardPouring         CardPouring[]
}

model AuditLog {
  id            Int          @id @default(autoincrement())
  entityType    String
  entityId      Int
  action        AuditAction
  userId        Int
  timestamp     DateTime     @default(now())
  oldValue      Json?
  newValue      Json?
  cardBalanceId Int?
  cardId        Int?
  cardPouringId Int?
  cardBalance   CardBalance? @relation("CardBalanceAuditLogs", fields: [cardBalanceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  card          Card?        @relation("CardAuditLogs", fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cardPouring   CardPouring? @relation("CardPouringAuditLogs", fields: [cardPouringId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          User         @relation(fields: [userId], references: [id])

  @@index([entityType, entityId])
  @@index([userId])
  @@index([cardId])
  @@index([cardBalanceId])
  @@index([cardPouringId])
}

model CardBalance {
  id           Int        @id @default(autoincrement())
  cardId       Int
  date         DateTime
  startBalance Float
  endBalance   Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  comment      String?
  auditLogs    AuditLog[] @relation("CardBalanceAuditLogs")
  card         Card       @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([cardId, date])
}

model Salary {
  id            Int             @id @default(autoincrement())
  fullName      String
  position      String
  startDate     DateTime
  payday        Int
  paydayMonth   Int?
  fixedSalary   Float?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  comment       String?
  periodic      PeriodType      @default(ONCE_MONTH)
  payday2       Int?
  payday3       Int?
  section       SalarySection   @default(PAYMENTS)
  FinRow        FinRow[]
  SalaryDebt    SalaryDebt[]
  SalaryEarning SalaryEarning[]
  payments      SalaryPayment[]
  ShiftReport   ShiftReport[]
}

model SalaryPayment {
  id          Int      @id @default(autoincrement())
  salaryId    Int
  amount      Float
  paymentDate DateTime
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  currency    String   @default("RUB")
  salary      Salary   @relation(fields: [salaryId], references: [id])
}

model IdexSyncOrder {
  id          Int                 @id @default(autoincrement())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  cabinetId   Int?
  processed   Json?
  status      IdexSyncOrderStatus
  startSyncAt DateTime?
  endSyncAt   DateTime?
  pages       Int[]
  cabinet     IdexCabinet?        @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
}

model CardPouring {
  id               Int        @id @default(autoincrement())
  cardId           Int
  pouringDate      DateTime
  initialAmount    Float
  initialDate      DateTime
  finalAmount      Float?
  finalDate        DateTime?
  pouringAmount    Float
  withdrawalAmount Float?
  withdrawalDate   DateTime?
  collectorName    String?
  status           CardStatus @default(ACTIVE)
  comment          String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  actor            String?
  auditLogs        AuditLog[] @relation("CardPouringAuditLogs")
  card             Card       @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model Cell {
  id              Int       @id @default(autoincrement())
  rowId           Int
  columnId        Int
  value           String?
  displayValue    String?
  calculatedValue String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  Column          Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  Row             Row       @relation(fields: [rowId], references: [id], onDelete: Cascade)
  Comment         Comment[]

  @@unique([rowId, columnId])
}

model Column {
  id           Int        @id @default(autoincrement())
  name         String
  type         ColumnType
  tableId      Int
  width        Int?
  isRequired   Boolean    @default(false)
  isFilterable Boolean    @default(false)
  isSummable   Boolean    @default(false)
  defaultValue String?
  format       String?
  order        Int
  options      Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  Cell         Cell[]
  Table        Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)
  Filter       Filter[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  cellId    Int
  text      String
  author    String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  Cell      Cell     @relation(fields: [cellId], references: [id], onDelete: Cascade)
}

model Filter {
  id          Int            @id @default(autoincrement())
  name        String
  tableId     Int
  columnId    Int
  operator    FilterOperator
  value       String?
  secondValue String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime
  Column      Column         @relation(fields: [columnId], references: [id], onDelete: Cascade)
  Table       Table          @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model FinRow {
  id            Int             @id @default(autoincrement())
  date          DateTime
  time          String
  shift         String
  startBalance  Float
  endBalance    Float
  employeeId    Int?
  usdtAmount    Float           @default(0)
  comment       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  currency      String          @default("RUB")
  section       SalarySection   @default(PAYMENTS)
  exchangeRate  Float?
  Salary        Salary?         @relation(fields: [employeeId], references: [id])
  FinRowExpense FinRowExpense[]
}

model FinRowExpense {
  id          Int           @id @default(autoincrement())
  finRowId    Int?
  expenseType String
  amount      Float
  date        DateTime
  time        String
  period      String?
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  currency    String        @default("RUB")
  section     SalarySection @default(PAYMENTS)
  FinRow      FinRow?       @relation(fields: [finRowId], references: [id])
}

model ImportExport {
  id        Int      @id @default(autoincrement())
  tableId   Int
  name      String
  type      String
  mappings  Json
  options   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Row {
  id        Int      @id @default(autoincrement())
  tableId   Int
  order     Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Cell      Cell[]
  Table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model SalaryDebt {
  id          Int      @id @default(autoincrement())
  salaryId    Int
  amount      Float
  debtDate    DateTime
  description String?
  isPaid      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Salary      Salary   @relation(fields: [salaryId], references: [id], onDelete: Cascade)
}

model Section {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  slug        String   @unique
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Table       Table[]
}

model ShiftReport {
  id                 Int                  @id @default(autoincrement())
  date               DateTime
  time               String
  shift              String
  startBalance       Float
  endBalance         Float
  employeeId         Int?
  usdtAmount         Float                @default(0)
  currency           String               @default("RUB")
  comment            String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  Salary             Salary?              @relation(fields: [employeeId], references: [id])
  ShiftReportExpense ShiftReportExpense[]
}

model ShiftReportExpense {
  id            Int          @id @default(autoincrement())
  shiftReportId Int?
  expenseType   String
  amount        Float
  currency      String       @default("RUB")
  date          DateTime
  time          String
  period        String?
  description   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  ShiftReport   ShiftReport? @relation(fields: [shiftReportId], references: [id])
}

model Table {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  sectionId     Int
  isSearchable  Boolean  @default(true)
  hasPagination Boolean  @default(true)
  pageSize      Int      @default(10)
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  Column        Column[]
  Filter        Filter[]
  Row           Row[]
  Section       Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model Password {
  id        Int           @id @default(autoincrement())
  name      String
  login     String?
  password  String
  createdAt DateTime      @default(now())
  updatedAt DateTime
  comment   String?
  type      PasswordType?
}

model SalaryEarning {
  id          Int      @id @default(autoincrement())
  amount      Float
  earningDate DateTime
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  salaryId    Int
  Salary      Salary   @relation(fields: [salaryId], references: [id], onDelete: Cascade)
}

model BalanceEntry {
  id        Int           @id @default(autoincrement())
  date      DateTime
  time      String
  amount    Float
  currency  String        @default("RUB")
  comment   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime
  section   SalarySection @default(PAYMENTS)
}

model BybitCabinet {
  id                          Int                           @id @default(autoincrement())
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime
  bybitEmail                  String
  bybitApiSecret              String?
  bybitApiToken               String?
  lastBybitSyncAt             DateTime?
  lastBybitSyncStatus         String?
  BybitCabinetChainedWithUser BybitCabinetChainedWithUser[]
  BybitOrderInfo              BybitOrderInfo[]
  BybitTransactionFromCabinet BybitTransactionFromCabinet[]
}

model BybitCabinetChainedWithUser {
  id             Int          @id @default(autoincrement())
  bybitCabinetId Int
  userId         Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  BybitCabinet   BybitCabinet @relation(fields: [bybitCabinetId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bybitCabinetId, userId])
  @@index([bybitCabinetId])
  @@index([bybitCabinetId, userId])
  @@index([userId])
}

model BybitClipMatch {
  id                          Int                         @id @default(autoincrement())
  idexTransactionId           Int
  bybitTransactionId          Int
  timeDifference              Int
  grossExpense                Float
  grossIncome                 Float
  grossProfit                 Float
  profitPercentage            Float
  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime
  matchBybitReportId          Int?
  userId                      Int
  BybitTransactionFromCabinet BybitTransactionFromCabinet @relation(fields: [bybitTransactionId], references: [id])
  IdexTransaction             IdexTransaction             @relation(fields: [idexTransactionId], references: [id])
  MatchBybitReport            MatchBybitReport?           @relation(fields: [matchBybitReportId], references: [id])
  User                        User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BybitOrderInfo {
  id             Int              @id @default(autoincrement())
  phoneNumbers   String[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  orderNo        String
  amount         Int
  bybitCabinetId Int
  dateTime       DateTime
  originalData   Json?
  processed      Boolean          @default(false)
  status         String
  totalPrice     Float
  type           String
  unitPrice      Float
  BybitCabinet   BybitCabinet     @relation(fields: [bybitCabinetId], references: [id])
  ViresClipMatch ViresClipMatch[]

  @@unique([orderNo, bybitCabinetId])
  @@index([bybitCabinetId])
}

model BybitTransactionFromCabinet {
  id               Int              @id @default(autoincrement())
  orderNo          String           @unique
  counterparty     String?
  status           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  amount           Float
  asset            String
  dateTime         DateTime
  originalData     Json?
  totalPrice       Float
  type             String
  unitPrice        Float
  processed        Boolean          @default(false)
  extractedPhones  String[]         @default([])
  lastAttemptError String?
  cabinetId        Int
  BybitClipMatch   BybitClipMatch[]
  BybitCabinet     BybitCabinet     @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
}

model MatchBybitReport {
  id             Int              @id @default(autoincrement())
  reportDate     DateTime
  totalMatches   Int
  totalProfit    Float
  averageProfit  Float
  successRate    Float
  timeRangeStart DateTime
  timeRangeEnd   DateTime
  notes          String?
  idexCabinets   Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  userId         Int              @default(1)
  BybitClipMatch BybitClipMatch[]
  User           User             @relation(fields: [userId], references: [id])
}

model MatchViresReport {
  id             Int              @id @default(autoincrement())
  reportDate     DateTime
  totalMatches   Int
  totalProfit    Float
  averageProfit  Float
  successRate    Float
  timeRangeStart DateTime
  timeRangeEnd   DateTime
  notes          String?
  idexCabinets   Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  userId         Int              @default(1)
  User           User             @relation(fields: [userId], references: [id])
  ViresClipMatch ViresClipMatch[]
}

model ViresCabinet {
  id                    Int                     @id @default(autoincrement())
  name                  String?
  login                 String
  password              String
  type                  PasswordType
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  comment               String?
  userId                Int
  lastUpdate            DateTime
  User                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  ViresTransactionPayin ViresTransactionPayin[]
}

model ViresClipMatch {
  id                    Int                   @id @default(autoincrement())
  viresTransactionId    Int
  timeDifference        Int
  grossExpense          Float
  grossIncome           Float
  grossProfit           Float
  profitPercentage      Float
  createdAt             DateTime              @default(now())
  updatedAt             DateTime
  matchViresReportId    Int?
  userId                Int
  bybitTransactionId    Int
  bybitOrderInfoId      Int
  BybitOrderInfo        BybitOrderInfo        @relation(fields: [bybitOrderInfoId], references: [id])
  MatchViresReport      MatchViresReport?     @relation(fields: [matchViresReportId], references: [id])
  User                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  ViresTransactionPayin ViresTransactionPayin @relation(fields: [viresTransactionId], references: [id])
}

model ViresTransactionPayin {
  id             Int              @id @default(autoincrement())
  cabinetId      Int
  createdAt      DateTime
  sum_rub        Float
  sum_usdt       Float
  card           String
  fio            String
  bank           String
  uuid           String           @unique
  ViresClipMatch ViresClipMatch[]
  ViresCabinet   ViresCabinet     @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
}

model CabinetNotification {
  id             BigInt       @id
  chat_id        Int
  chat_name      String
  cabinet_name   String
  cabinet_id     String
  message        String
  timestamp      DateTime     @default(now())
  createdAt      DateTime     @default(now())
  isRead         Boolean      @default(false)
  cabinetId      Int?
  userId         Int?
  message_id_str String
  cabinet        IdexCabinet? @relation(fields: [cabinetId], references: [id])
  user           User?        @relation(fields: [userId], references: [id])

  @@unique([chat_id, message_id_str])
  @@index([cabinet_id])
  @@index([cabinetId])
  @@index([userId])
  @@index([isRead])
  @@index([timestamp])
  @@index([message_id_str])
}

enum PeriodType {
  TWICE_MONTH
  THRICE_MONTH
  ONCE_MONTH
}

enum UserRole {
  USER
  USERCARDS
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

enum IdexSyncOrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum CardStatus {
  ACTIVE
  WARNING
  BLOCKED
}

enum ColumnType {
  TEXT
  NUMBER
  DATE
  DATETIME
  BOOLEAN
  SELECT
  BUTTON
  CALCULATED
  CURRENCY
  LINK
  COMMENT
}

enum FilterOperator {
  EQUALS
  NOT_EQUALS
  GREATER_THAN
  LESS_THAN
  GREATER_OR_EQUAL
  LESS_OR_EQUAL
  CONTAINS
  NOT_CONTAINS
  STARTS_WITH
  ENDS_WITH
  BETWEEN
  IN_LIST
}

enum SalarySection {
  PAYMENTS
  TRACTOR
}

enum PasswordType {
  BYBIT
}
